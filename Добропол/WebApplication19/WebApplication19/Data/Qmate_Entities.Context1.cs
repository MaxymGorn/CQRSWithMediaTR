//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication19.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Qmate_Entities : DbContext
    {
        public Qmate_Entities()
            : base("name=Qmate_Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<RetrieveJobList_Result> RetrieveJobList(Nullable<int> key)
        {
            var keyParameter = key.HasValue ?
                new ObjectParameter("Key", key) :
                new ObjectParameter("Key", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RetrieveJobList_Result>("RetrieveJobList", keyParameter);
        }
    
        public virtual ObjectResult<RetrieveWorkloadDays_Result> RetrieveWorkloadDays(Nullable<int> terminalId, Nullable<int> jobId, string beginDate, string endDate)
        {
            var terminalIdParameter = terminalId.HasValue ?
                new ObjectParameter("TerminalId", terminalId) :
                new ObjectParameter("TerminalId", typeof(int));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            var beginDateParameter = beginDate != null ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RetrieveWorkloadDays_Result>("RetrieveWorkloadDays", terminalIdParameter, jobIdParameter, beginDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<RetrieveWorkloadTime_Result> RetrieveWorkloadTime(Nullable<int> terminalId, string regDate, Nullable<int> jobId)
        {
            var terminalIdParameter = terminalId.HasValue ?
                new ObjectParameter("TerminalId", terminalId) :
                new ObjectParameter("TerminalId", typeof(int));
    
            var regDateParameter = regDate != null ?
                new ObjectParameter("RegDate", regDate) :
                new ObjectParameter("RegDate", typeof(string));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RetrieveWorkloadTime_Result>("RetrieveWorkloadTime", terminalIdParameter, regDateParameter, jobIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddClient(Nullable<int> terminalId, string authCode, Nullable<int> clientId, Nullable<int> segmentId, string setTime, Nullable<int> jobId, Nullable<int> employeeId, Nullable<int> needApply, string clientPhone, string clientEmail, string commentary, string clientName, string information, string typeInformation, string timeInHold, Nullable<int> setId, Nullable<int> notificationType, Nullable<int> notificationEvt)
        {
            var terminalIdParameter = terminalId.HasValue ?
                new ObjectParameter("TerminalId", terminalId) :
                new ObjectParameter("TerminalId", typeof(int));
    
            var authCodeParameter = authCode != null ?
                new ObjectParameter("AuthCode", authCode) :
                new ObjectParameter("AuthCode", typeof(string));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var segmentIdParameter = segmentId.HasValue ?
                new ObjectParameter("SegmentId", segmentId) :
                new ObjectParameter("SegmentId", typeof(int));
    
            var setTimeParameter = setTime != null ?
                new ObjectParameter("SetTime", setTime) :
                new ObjectParameter("SetTime", typeof(string));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var needApplyParameter = needApply.HasValue ?
                new ObjectParameter("NeedApply", needApply) :
                new ObjectParameter("NeedApply", typeof(int));
    
            var clientPhoneParameter = clientPhone != null ?
                new ObjectParameter("ClientPhone", clientPhone) :
                new ObjectParameter("ClientPhone", typeof(string));
    
            var clientEmailParameter = clientEmail != null ?
                new ObjectParameter("ClientEmail", clientEmail) :
                new ObjectParameter("ClientEmail", typeof(string));
    
            var commentaryParameter = commentary != null ?
                new ObjectParameter("Commentary", commentary) :
                new ObjectParameter("Commentary", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var informationParameter = information != null ?
                new ObjectParameter("Information", information) :
                new ObjectParameter("Information", typeof(string));
    
            var typeInformationParameter = typeInformation != null ?
                new ObjectParameter("TypeInformation", typeInformation) :
                new ObjectParameter("TypeInformation", typeof(string));
    
            var timeInHoldParameter = timeInHold != null ?
                new ObjectParameter("TimeInHold", timeInHold) :
                new ObjectParameter("TimeInHold", typeof(string));
    
            var setIdParameter = setId.HasValue ?
                new ObjectParameter("SetId", setId) :
                new ObjectParameter("SetId", typeof(int));
    
            var notificationTypeParameter = notificationType.HasValue ?
                new ObjectParameter("NotificationType", notificationType) :
                new ObjectParameter("NotificationType", typeof(int));
    
            var notificationEvtParameter = notificationEvt.HasValue ?
                new ObjectParameter("NotificationEvt", notificationEvt) :
                new ObjectParameter("NotificationEvt", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddClient", terminalIdParameter, authCodeParameter, clientIdParameter, segmentIdParameter, setTimeParameter, jobIdParameter, employeeIdParameter, needApplyParameter, clientPhoneParameter, clientEmailParameter, commentaryParameter, clientNameParameter, informationParameter, typeInformationParameter, timeInHoldParameter, setIdParameter, notificationTypeParameter, notificationEvtParameter);
        }
    }
}
